/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/bitmap_screen_screen/Bitmap_screenViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <gui/common/BMPFileLoader.hpp>
//#include <gui/common/JPEGFileLoader.hpp>
#include <iostream>

using namespace std;

uint8_t lineBuffer[320 * 3];

Bitmap_screenViewBase::Bitmap_screenViewBase()
{
    button1.setXY(293, 381);
    button1.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));

    image.setXY(48, 94);
	image.setWidth(255);
	image.setHeight(255);
	//image.setBitmap(Bitmap(BITMAP_FLOWER2_ID));

    image_right.setXY(502, 94);
    image_right.setBitmap(Bitmap(BITMAP_FLOWER_ID));

    add(button1);
    //add(image);
    add(image_right);
}
#if 0

void Bitmap_screenViewBase::JpgImageFromFile()
{
	FILE* f = fopen("image.jpg", "rb");
	uint16_t width, height;

	JPEGFileLoader::getJPEGDimensions(f, width, height);
	BitmapId bmpId;

	//create dynamic bitmap matching file dimensions and in format matching LCD
	if (HAL::lcd().bitDepth() == 16)
	{
		bmpId = Bitmap::dynamicBitmapCreate(width, height, Bitmap::RGB565);
	}
	else
	{
		bmpId = Bitmap::dynamicBitmapCreate(width, height, Bitmap::RGB888);
	}

	if (bmpId != BITMAP_INVALID)
	{
		//Succesfully created, load JPEG file to bitmap
		JPEGFileLoader::readJPEGFile(Bitmap(bmpId), f, lineBuffer);
	}

	//Image shall show the loaded bitmap
	image.setBitmap(Bitmap(bmpId));

	//Position image and add to View
	image.setXY(20, 20);
	add(image);
}


#endif
void Bitmap_screenViewBase::bmpImageFromFile()
{
  

#if 1
  cout<<"Bitmap_screenViewBase called "<<endl;
  //printf("Bitmap_screenViewBase::setupScreen called .. \r\n");

  FILE* f = fopen("image.bmp", "rb");
  uint16_t width, height;

  if (f != NULL)
  {
	  cout << "file opened .... " << endl;
	  //Get the image dimensions from the BMP file
	  BMPFileLoader::getBMP24Dimensions(f, width, height);
	  BitmapId bmpId;

	  printf("image read  width = %d height = %d \r\n", width, height);
	  //Create (16bit) dynamic bitmap of same dimension
	  bmpId = Bitmap::dynamicBitmapCreate(width, height, Bitmap::RGB888);
	  printf("bmpId =%d \r\n", bmpId);
	  if (bmpId != BITMAP_INVALID)
	  {
		  //Load pixels from BMP file to dynamic bitmap
		  BMPFileLoader::readBMP24File(Bitmap(bmpId), f);

		  //  //Make Image show the loaded bitmap
		  image.setBitmap(Bitmap(bmpId));

		  //Position image and add to View
		  image.setXY(20, 20);
		  add(image);
	  }
  }
  else
  {
	  cout << "unable to open image file .... " << endl;
  }
#else
	return;
#endif
}



void Bitmap_screenViewBase::setupScreen()
{
	bmpImageFromFile();

}